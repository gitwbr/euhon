# HTTP 配置
server {
    listen 80;
    server_name .euhon.com;  # 匹配所有子域名
    
    # Let's Encrypt 验证目录
    location /.well-known/acme-challenge/ {
        root /var/www/html;
        allow all;
        try_files $uri =404;
    }
    
    # 重定向到 HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS 配置
server {
    listen 443 ssl;
    server_name .euhon.com;  # 匹配所有子域名
    
    # SSL 配置
    ssl_certificate /etc/letsencrypt/live/client1.euhon.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/client1.euhon.com/privkey.pem;
    
    # SSL 参数
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # 基础设置
    proxy_buffers 16 64k;
    proxy_buffer_size 128k;
    proxy_read_timeout 900s;
    proxy_connect_timeout 900s;
    proxy_send_timeout 900s;
    client_max_body_size 100m;
    
    # 错误日志级别调整为 debug
    error_log /var/log/nginx/error.log debug;
    
    # 根据子域名转发到不同的后端
    location / {
        set $odoo_backend "";
        if ($host ~ "^client1\.") {
            set $odoo_backend "http://127.0.0.1:8001";
        }
        if ($host ~ "^client2\.") {
            set $odoo_backend "http://127.0.0.1:8002";
        }
        if ($host ~ "^client3\.") {
            set $odoo_backend "http://127.0.0.1:8003";
        }
        if ($host ~ "^client4\.") {
            set $odoo_backend "http://127.0.0.1:8004";
        }
        
        # 添加调试信息
        add_header X-Debug-Host $host;
        add_header X-Debug-Backend $odoo_backend;
        
        proxy_pass $odoo_backend;
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 修复重定向问题
        proxy_redirect http://$host https://$host;
    }
    
    # 长轮询配置
    location /longpolling {
        set $chat_backend "";
        if ($host ~ "^client1\.") {
            set $chat_backend "http://127.0.0.1:9001";
        }
        if ($host ~ "^client2\.") {
            set $chat_backend "http://127.0.0.1:9002";
        }
        if ($host ~ "^client3\.") {
            set $chat_backend "http://127.0.0.1:9003";
        }
        if ($host ~ "^client4\.") {
            set $chat_backend "http://127.0.0.1:9004";
        }
        
        # 添加调试信息
        add_header X-Debug-Host $host;
        add_header X-Debug-Backend $chat_backend;
        
        proxy_pass $chat_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 修复重定向问题
        proxy_redirect http://$host https://$host;
    }
    
    # 静态文件缓存
    location ~* /web/static/ {
        set $odoo_backend "";
        if ($host ~ "^client1\.") {
            set $odoo_backend "http://127.0.0.1:8001";
        }
        if ($host ~ "^client2\.") {
            set $odoo_backend "http://127.0.0.1:8002";
        }
        if ($host ~ "^client3\.") {
            set $odoo_backend "http://127.0.0.1:8003";
        }
        if ($host ~ "^client4\.") {
            set $odoo_backend "http://127.0.0.1:8004";
        }
        
        proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
        proxy_cache_valid 200 60m;
        proxy_buffering on;
        expires 864000;
        proxy_pass $odoo_backend;
        
        # 修复重定向问题
        proxy_redirect http://$host https://$host;
    }
} 